name: Repo Created

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  # This job checks if the repository is new runs only once and deletes itself
  check-initial-commit:
    if: ${{ !github.event.repository.is_template }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check if initial commit
        id: check
        run: |
          if [ $(git rev-list --count HEAD) -le 1 ]
          then
            echo "initial_commit=true" >> $GITHUB_OUTPUT
          else
            echo "initial_commit=false" >> $GITHUB_OUTPUT
          fi

      - name: Delete LICENSE file
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com
          rm -f LICENSE
          git add LICENSE
          git commit -m "Delete LICENSE file"
          git push

      - name: Change README
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: steps.check.outputs.initial_commit == 'true'
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com
          echo "# ${{github.event.repository.name}} project :wave:" > README.md
          echo "---" >> README.md
          echo "## Usage" >> README.md
          echo "" >> README.md
          echo '1. Clone the project: ```git clone git@github.com:${{github.repository_owner}}/${{github.event.repository.name}}.git```' >> README.md
          echo "" >> README.md
          echo '2. Go to the project folder: ```cd ${{github.event.repository.name}}```' >> README.md
          echo "" >> README.md
          echo '3. Install the package installer [uv](https://github.com/astral-sh/uv): ```pip install uv```' >> README.md
          echo "" >> README.md
          echo '4. Create virtual environment: ```uv venv```' >> README.md
          echo "" >> README.md
          echo '5. Activate virtual environment: ```source .venv/bin/activate```' >> README.md
          echo "" >> README.md
          echo '6. Install development dependencies: ```just dev-deps```' >> README.md
          echo "" >> README.md
          echo '7. Build the Docker container: ```just build```' >> README.md
          echo "" >> README.md
          echo '8. Start the application: ```just up```' >> README.md
          echo "" >> README.md
          echo '9. Install pre-commit hooks: ```pre-commit install```' >> README.md
          echo "" >> README.md
          echo "> **Note:** This project has been tested and verified only on macOS. While it may work on other operating systems, we cannot guarantee full compatibility." >> README.md
          git add README.md
          git commit -m "Changed README.md"
          git push

      - name: Update Claude.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: steps.check.outputs.initial_commit == 'true'
        run: |
          # Check if claude.md exists and has placeholders
          if [ -f "claude.md" ] && grep -q "<reponame>" claude.md; then
            echo "üìù Updating claude.md with repository information..."

            # Get repository information
            REPO_NAME="${{ github.event.repository.name }}"
            REPO_DESC="${{ github.event.repository.description }}"
            REPO_OWNER="${{ github.repository_owner }}"
            CURRENT_DATE=$(date +"%Y-%m-%d")

            # Use a default description if empty
            if [ -z "$REPO_DESC" ]; then
              REPO_DESC="A Python project built with modern tooling and best practices"
            fi

            # Replace placeholders in claude.md
            sed -i "s|<reponame>|${REPO_NAME}|g" claude.md
            sed -i "s|<description>|${REPO_DESC}|g" claude.md
            sed -i "s|<owner>|${REPO_OWNER}|g" claude.md
            sed -i "s|<date>|${CURRENT_DATE}|g" claude.md

            # Show the changes
            echo "‚ú® Updated claude.md with:"
            echo "  üì¶ Repository: ${REPO_NAME}"
            echo "  üìù Description: ${REPO_DESC}"
            echo "  üë§ Owner: ${REPO_OWNER}"
            echo "  üìÖ Date: ${CURRENT_DATE}"

            # Commit the changes
            git config user.name github-actions[bot]
            git config user.email github-actions[bot]@users.noreply.github.com
            git add claude.md
            git commit -m "Update claude.md with repository information"
            git push

            echo "‚úÖ Successfully updated claude.md"
          else
            echo "‚ÑπÔ∏è claude.md not found or already updated, skipping..."
          fi

      - name: Remove current workflow
        if: steps.check.outputs.initial_commit == 'true'
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com
          git rm .github/workflows/new-repo-created.yml
          git commit -m "Remove initial commit workflow"
          git push
